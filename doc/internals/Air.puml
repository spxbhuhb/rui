@startuml

left to right direction

class AirClass {
    originalFunction : IrFunction

    irClass : IrClass

    adapter : IrProperty
    scope : IrProperty
    externalPatch : IrProperty
    fragment : IrProperty

    patch : IrSimpleFunction

    constructor : IrConstructor
    initializer : IrAnonymousInitializer

    stateVariables : AirStateVariable []
    dirtyMasks : AirDirtyMask []

    rendering: AirRenderingStatement
}
AirElement <|-- AirClass

class AirEntryPoint {
    originalFunction : IrSimpleFunction
    externalPatch : IrSimpleFunction
}
AirElement <|-- AirEntryPoint

class AirStateVariable {
    property : IrProperty
    isDirty :
}
AirElement <|-- AirStateVariable

class AirDirtyMask {
    property : IrProperty
    invalidate : IrSimpleFunction
}
AirElement <|-- AirDirtyMask

class AirRenderingStatement {
    externalPatch : IrSimpleFunction
    newInstance : IrConstructorCall
}
AirElement <|-- AirRenderingStatement

class AirBlock {
    statements : AirRenderingStatement []
}
AirRenderingStatement <|-- AirBlock

class AirCall {
    callSiteDependencyMask : Long
}
AirRenderingStatement <|-- AirCall

class AirWhen {
    select : IrSimpleFunction
    branches : IrSimpleFunction []
}
AirRenderingStatement <|-- AirWhen

class AirForLoop {
    iterator : IrExpression
    loopVariable : IrDeclaration
    implicitExternalPatch : IrSimpleFunction
    builder : IrSimpleFunction
}
AirRenderingStatement <|-- AirForLoop

class AirHigherOrderCall {
    higherOrderArguments : AirHigherOrderArgument []
}
AirRenderingStatement <|-- AirHigherOrderCall

class AirHigherOrderArgument {
    builder : IrSimpleFunction
    externalPatch : IrSimpleFunction
    rendering : AirRenderingStatement
}
AirElement <|-- AirHigherOrderArgument

class AirElement {
    parent : AirElement
}
@enduml