@startuml

left to right direction

class SirClass {
    originalFunction : IrFunction

    irClass : IrClass

    adapter : IrProperty
    scope : IrProperty
    externalPatch : IrProperty
    fragment : IrProperty

    constructor : IrConstructor
    initializer : IrAnonymousInitializer

    stateVariables : SirStateVariable []
    dirtyMasks : SirDirtyMask []

    builder: IrSimpleFunction
    patch : IrSimpleFunction
}
SirElement <|-- SirClass

class SirEntryPoint {
    originalFunction : IrSimpleFunction
    externalPatch : IrSimpleFunction
}
SirElement <|-- SirEntryPoint

class SirStateVariable {
    property : IrProperty
    isDirty :
}
SirElement <|-- SirStateVariable

class SirDirtyMask {
    property : IrProperty
    invalidate : IrSimpleFunction
}
SirElement <|-- SirDirtyMask

class SirRenderingStatement {
    newInstance : IrConstructorCall
}
SirElement <|-- SirRenderingStatement

class SirBlock {
    statements : SirRenderingStatement []
}
SirRenderingStatement <|-- SirBlock

class SirCall {
    externalPatch : IrSimpleFunction
    callSiteDependencyMask : Long
}
SirRenderingStatement <|-- SirCall

class SirWhen {
    select : IrSimpleFunction
    branches : IrSimpleFunction []
}
SirRenderingStatement <|-- SirWhen

class SirForLoop {
    iterator : IrExpression
    loopVariable : IrDeclaration
    implicitExternalPatch : IrSimpleFunction
    builder : IrSimpleFunction
}
SirRenderingStatement <|-- SirForLoop

class SirHigherOrderCall {
    higherOrderArguments : SirHigherOrderArgument []
}
SirRenderingStatement <|-- SirHigherOrderCall

class SirHigherOrderArgument {
    builder : IrSimpleFunction
    externalPatch : IrSimpleFunction
    rendering : SirRenderingStatement
}
SirElement <|-- SirHigherOrderArgument

class SirElement {
    parent : SirElement
}
@enduml